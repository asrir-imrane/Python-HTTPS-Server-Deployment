- name: Deploy Python HTTPS Server as Non-Root User
  hosts: all
  become: false
  vars:
    user_name: imrane  # Replace with the non-root user you want to use
  tasks:
       - name: Create directories for server files under non-root user
      file:
        path: "/home/{{ user_name }}/python_server"
        state: directory
        owner: "{{ user_name }}"
        group: "{{ user_name }}"
        mode: '0755'

    - name: Copy the Python server script to the target machine
      copy:
        src: ./server.py
        dest: "/home/{{ user_name }}/python_server/server.py"
        owner: "{{ user_name }}"
        group: "{{ user_name }}"
        mode: '0755'

    - name: Copy SSL key file
      copy:
        src: ./key.pem
        dest: "/home/{{ user_name }}/python_server/key.pem"
        owner: "{{ user_name }}"
        group: "{{ user_name }}"
        mode: '0600'

    - name: Copy SSL certificate file
      copy:
        src: ./cert.pem
        dest: "/home/{{ user_name }}/python_server/cert.pem"
        owner: "{{ user_name }}"
        group: "{{ user_name }}"
        mode: '0600'

    - name: Create systemd service file for Python server (requires root)
      become: true
      copy:
        dest: /etc/systemd/system/python_server.service
        content: |
          [Unit]
          Description=Simple Python HTTPS Server
          After=network.target

          [Service]
          User={{ user_name }}
          WorkingDirectory=/home/{{ user_name }}/python_server
          ExecStart=/usr/bin/python3 /home/{{ user_name }}/python_server/server.py
          Restart=always

          [Install]
          WantedBy=multi-user.target

    - name: Reload systemd daemon (requires root)
      become: true
      command: systemctl daemon-reload

    - name: Enable and start the Python server with systemd (requires root)
      become: true
      systemd:
        name: python_server
        enabled: yes
        state: started

    - name: Test if the server is running
      uri:
        url: https://localhost:8443/
        validate_certs: no
        return_content: yes
      register: result
      retries: 5
      delay: 3
      until: result.status == 200

    - name: Display server status
      debug:
        var: result.content
